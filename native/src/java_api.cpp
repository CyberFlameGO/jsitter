/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <tree_sitter/api.h>
#include <cstring>
/* Header for class jsitter_interop_JSitter */

struct TSZipper {
    TSTreeCursor cursor;
    uint32_t start_byte;
    uint32_t end_byte;
    TSSymbol symbol;
};

#ifdef __cplusplus
extern "C" {
#endif
    
    TSZipper *new_zipper(TSNode root) {
        TSZipper *new_zipper = (TSZipper *)malloc(sizeof(TSZipper));
        TSTreeCursor c = ts_tree_cursor_new(root);
        new_zipper->cursor = c;
        new_zipper->start_byte = ts_node_start_byte(root);
        new_zipper->end_byte = ts_node_end_byte(root);
        new_zipper->symbol = ts_node_symbol(root);
        return new_zipper;
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    copyCursor
     * Signature: (J)J
     */
    JNIEXPORT jlong JNICALL Java_jsitter_interop_JSitter_copyCursor
    (JNIEnv *, jclass, jlong zipper_ptr) {
        TSZipper *zip = (TSZipper *)zipper_ptr;
        return (jlong) new_zipper(ts_tree_cursor_current_node(&zip->cursor));
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    move
     * Signature: (JISZ)Z
     */
    JNIEXPORT jboolean JNICALL Java_jsitter_interop_JSitter_move
    (JNIEnv *, jclass, jlong, jint, jshort, jboolean);
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    getSymbolName
     * Signature: (JS)Ljava/lang/String;
     */
    JNIEXPORT jstring JNICALL Java_jsitter_interop_JSitter_getSymbolName
    (JNIEnv *env, jclass, jlong language_ptr, jshort ts_symbol) {
        const char *name = ts_language_symbol_name((TSLanguage *)language_ptr, ts_symbol);
        return env->NewStringUTF(name);
    }
    
    JNIEXPORT jstring JNICALL Java_jsitter_interop_JSitter_getName
    (JNIEnv *env, jclass, jlong zipper_ptr) {
        TSZipper *zip = (TSZipper *)zipper_ptr;
        TSNode node = ts_tree_cursor_current_node(&zip->cursor);
        const char *name = ts_node_type(node);
        return env->NewStringUTF(name);
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    isTerminal
     * Signature: (JS)Z
     */
    JNIEXPORT jboolean JNICALL Java_jsitter_interop_JSitter_isTerminal
    (JNIEnv *, jclass, jlong language_ptr, jshort ts_symbol) {
        return ts_language_symbol_type((TSLanguage*)language_ptr, (TSSymbol)ts_symbol) == TSSymbolTypeAnonymous;
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    getSymbolByName
     * Signature: (JLjava/lang/String;)S
     */
    JNIEXPORT jshort JNICALL Java_jsitter_interop_JSitter_getSymbolByName
    (JNIEnv *env, jclass, jlong language_ptr, jstring name) {
        jboolean copy;
        const char *chars = env->GetStringUTFChars(name, &copy);
        TSSymbol symbol = ts_language_symbol_for_name((TSLanguage *)language_ptr, chars);
        if (copy) {
            env->ReleaseStringUTFChars(name, chars);
        }
        return symbol;
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    releaseTree
     * Signature: (J)V
     */
    JNIEXPORT void JNICALL Java_jsitter_interop_JSitter_releaseTree
    (JNIEnv *, jclass, jlong tree_ptr) {
        ts_tree_delete((TSTree *)tree_ptr);
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    releaseParser
     * Signature: (J)V
     */
    JNIEXPORT void JNICALL Java_jsitter_interop_JSitter_releaseParser
    (JNIEnv *, jclass, jlong parser_ptr) {
        ts_parser_delete((TSParser *)parser_ptr);
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    parse
     * Signature: (JJLjsitter/interop/JSitter/Input;JIII)J
     */
    JNIEXPORT jlong JNICALL Java_jsitter_interop_JSitter_parse
    (JNIEnv *, jclass, jlong, jlong, jobject, jlong, jint, jint, jint);
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    releaseZipper
     * Signature: (J)V
     */
    JNIEXPORT void JNICALL Java_jsitter_interop_JSitter_releaseZipper
    (JNIEnv *, jclass, jlong zipper_ptr) {
        TSZipper *zip = (TSZipper *)zipper_ptr;
        ts_tree_cursor_delete(&zip->cursor);
        free(zip);
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    makeCursor
     * Signature: (J)J
     */
    JNIEXPORT jlong JNICALL Java_jsitter_interop_JSitter_makeCursor
    (JNIEnv *, jclass, jlong tree_ptr) {
        TSTree *tree = (TSTree *)tree_ptr;
        TSNode root = ts_tree_root_node(tree);
        return (jlong)new_zipper(root);
    }
    
    /*
     * Class:     jsitter_interop_JSitter
     * Method:    newParser
     * Signature: (J)J
     */
    JNIEXPORT jlong JNICALL Java_jsitter_interop_JSitter_newParser
    (JNIEnv *, jclass, jlong language_ptr) {
        TSParser *parser = ts_parser_new();
        ts_parser_set_language(parser, (TSLanguage *)language_ptr);
        return (jlong) parser;
    }
    
#ifdef __cplusplus
}
#endif
